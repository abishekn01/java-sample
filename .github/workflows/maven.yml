name: Java CI/CD Pipeline

# Trigger on push to main branch and pull requests
on:
  push:
    branches:
      - main
  
env:
  IMAGE_NAME: abishekn01/sample-app
  DOCKER_REGISTRY: docker.io

jobs:
  # -----------------------------
  # 1. Code Checkout & Build
  # -----------------------------
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [17, 20]  # Matrix build for multiple Java versions
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: temurin

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean install -B
        continue-on-error: false # Stop if build fails

  # -----------------------------
  # 2. SonarQube Static Analysis
  # -----------------------------
  sonar:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - name: SonarQube Scan 
      uses: SonarSource/sonarqube-scan-action@v4.1.0
      with:
        scanner-version: 'latest'
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  # -----------------------------
  # 3. Docker Build & Push
  # -----------------------------
  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME:${{ github.sha }} .
          docker tag $IMAGE_NAME:${{ github.sha }} $IMAGE_NAME:latest

      - name: Push Docker image
        run: |
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest

  # -----------------------------
  # 4. Deploy Docker Image
  # -----------------------------
  deploy:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Docker image
        run: docker pull $IMAGE_NAME:latest

      - name: Deploy container
        run: |
          docker stop sample-app || true
          docker rm sample-app || true
          docker run -d --name sample-app -p 8080:8080 $IMAGE_NAME:latest

  # -----------------------------
  # 5. Notifications (Slack example)
  # -----------------------------
  notify:
    runs-on: ubuntu-latest
    needs: [build, sonar, docker, deploy]
    steps:
      - name: Send Slack notification
        if: always() # Send notification even if previous jobs fail
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: |
            CI/CD Pipeline completed.
            Status: ${{ job.status }}
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref }}
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
