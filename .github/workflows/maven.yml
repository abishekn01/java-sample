name: Java CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: abishekn01/sample-app
  DOCKER_REGISTRY: docker.io

jobs:
  # -----------------------------
  # 1. Code Checkout & Build
  # -----------------------------
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [17, 20] # Matrix build for multiple Java versions
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: temurin

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean install -B

  # -----------------------------
  # 2. SonarQube Static Analysis
  # -----------------------------
  build_project_and_sonar_scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Project
        run: mvn package

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # recommended for SonarQube

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

  # -----------------------------
  # 3. Docker Build & Push
  # -----------------------------
  docker:
    runs-on: ubuntu-latest
    needs: build_project_and_sonar_scan
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME:${{ github.sha }} .
          docker tag $IMAGE_NAME:${{ github.sha }} $IMAGE_NAME:latest

      - name: Push Docker image
        run: |
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest

  # -----------------------------
  # 4. Deploy Docker Image
  # -----------------------------
  deploy:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Docker image
        run: docker pull $IMAGE_NAME:latest

      - name: Deploy container
        run: |
          docker stop sample-app || true
          docker rm sample-app || true
          docker run -d --name sample-app -p 8080:8080 $IMAGE_NAME:latest 
